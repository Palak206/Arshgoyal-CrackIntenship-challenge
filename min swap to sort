// T.C = O(NLOGN)
//  AUXILARY SPACE = O(N)
// first we sort the array than we swap in the sorted array to converted into actual array
class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    int n = nums.size();
	    vector<pair<int,int>>v;
	    int i ;
	    
	    
	    for(i = 0 ; i<n ; i++){
	        
	        v.push_back({nums[i] , i});
	        
	      }
	      
	   sort(v.begin() , v.end());
	   int swaps =0;
	   
	   for(i = 0 ; i<n ; i++){
	       pair<int,int>p = v[i]; //{2,3}
	       
	       int value = p.first; //{1}value
	       int index = p .second; //{1} indx
	       
	       //i = 0
	       //(1,1) (2,2) (3,0) (4,3)
	       //(2,2) (1,1) (3,0) (4,3) 1swap
	       //(3,0) (1,1) (2,2) (4,3) 2swap
	       
	       if(i != index){
	           swaps++;
	           swap(v[i] , v[index]);
	           i--;
	       }
	       
	   }
	   
	        return swaps;
	        
	    
	    // Code here
	}
};
